// declare global variables, load files, etc. here
var STARZ = STARZ || {};
var UI = UI || {}; STARZ.Achievement = {};

STARZ.Achievement.SavedTV = {
    'name': 'Screen Saver',
    'detail': 'Save at least 20 TVs.'
};

STARZ.Achievement.BrokenTV = {
    'name': 'Slo Mo',
    'detail': 'Break at least 10 TVs.'
};

STARZ.Achievement.RightAnswer = {
    'name': 'King of the Clicker',
    'detail': 'Answer at least one quiz question correctly.'
};

STARZ.Achievement.WrongAnswer = {
    'name': 'Wire Crosser',
    'detail': 'Answer at least one quiz question incorrectly.'
};

STARZ.Achievement.Clicks = {
    'name': 'I Can\'t Feel My Fingers',
    'detail': 'Change 100 channels or more.'
};

STARZ.Achievement.GameComplete = {
    'name': 'Control Freak',
    'detail': 'Complete the "In Control" Game.'
}; STARZ.GameStatusManager = (function () {

    var gameData;

    // start listening for score events
    addListeners();

    function storeData(k, v) {
        switch (k) {
            case 'score':
                gameData.score += v;
                break;
            case 'bonus':
                gameData.score += v;
                gameData.bonusCount += v;
                break;
            case 'correct':
                gameData.correct++;
                gameData.score += STARZ.Scores.Correct;
                break;
            case 'incorrect':
                gameData.incorrect++;
                gameData.score += STARZ.Scores.Incorrect;
                break;
            case 'completedTV':
                gameData.completedTV++;
                gameData.score += STARZ.Scores.CompletedTV;
                if (gameData.completedTV > 20)STARZ.EventDispatcher.fire('achievementEvent', STARZ.Achievement.SavedTV);
                break;
            case 'brokenTV':
                gameData.brokenTV++;
                gameData.score += STARZ.Scores.BrokenTV;
                if (gameData.brokenTV > 10)STARZ.EventDispatcher.fire('achievementEvent', STARZ.Achievement.BrokenTV);
                break;
            case 'achievement':
                // check for duplicates
                if (gameData.achievements.indexOf(v) === -1)gameData.achievements.push(v);
                break;
        }
    }

    function getData() {
        return gameData;
    }

    function reset() {
        gameData = {
            'score': 0,
            'correct': 0,
            'incorrect': 0,
            'completedTV': 0,
            'bonusCount': 0,
            'brokenTV': 0,
            'achievements': [],
            'currentRound': 0,
            'totalRounds': 3
        }
    }

    // capture stats and scoring events
    function addListeners() {
        document.addEventListener('tvEvent', handleEvent);
        document.addEventListener('quizEvent', handleEvent);
        document.addEventListener('gameEvent', handleEvent);
        document.addEventListener('achievementEvent', handleEvent);
    }

    function handleEvent(e) {
        var event = e.type,
            detail = e.detail;

        switch (event) {
            case 'gameEvent':
                if (detail === 'roundComplete')gameData.currentRound++;
                break;
            case 'tvEvent':
                if (detail === 'complete')STARZ.GameStatusManager.store('completedTV');
                if (detail === 'broken')STARZ.GameStatusManager.store('brokenTV');
                if (detail.type === 'bonus')STARZ.GameStatusManager.store('bonus', detail.value);
                break;
            case 'quizEvent':
                if (detail === 'correct')STARZ.GameStatusManager.store('correct');
                if (detail === 'incorrect')STARZ.GameStatusManager.store('incorrect');
                break;
            case 'achievementEvent':
                storeData('achievement', detail);
                break;
        }
    }

    return {
        reset: reset,
        store: storeData,
        data: getData
    }

})(); STARZ.QuizManager = (function () {

    var quizData,
        currentQuestion = 0,
        $parentContainer = $('#triviaScreen'),
        $questionText,
        $questionAnswersContainer,
        $questionAnswers,
        $questionFeedback,
        $nextButtonOptions,
        $nextButton,
        totalAnswers,
        completedAnswers;

    function storeData(d) {
        quizData = d;
    }

    // accepts the page element that you'd like to use for the questions
    function createQuestion(el) {
        // remove button FX to keep buttons hidden
        UI.ButtonFX.cleanup('.buttonOptions');

        // cleanup existing content
        cleanup();

        // store the page elements for the quiz
        $questionText = $questionText || $('[data-question]:eq(0)');
        $questionAnswersContainer = $questionAnswersContainer || $('[data-answers]:eq(0)');
        $questionFeedback = $questionFeedback || $('[data-feedback]:eq(0)');
        $nextButtonOptions = $nextButtonOptions || $parentContainer.find('.buttonOptions');

        // hide all the options
        $nextButtonOptions.hide();

        var q = quizData.questions[currentQuestion];
        $questionText.text(q.question);

        // build question answers
        for (var i = 0; i < q.answers.length; i++) {
            var answer = q.answers[i].answer;
            var correct = q.answers[i].correct;

            // keep track of the total right answers
            if (correct === 1)totalAnswers++;

            var html = '<' + el + '  class="lightMargin hotspot triviaButton default" data-answer data-correct="' + correct + '">' + answer + '</' + el + '>';
            $(html).appendTo($questionAnswersContainer);
        }

        // animate in buttons
        animateButtons('.triviaButton');

        // add button FX to new instances
        UI.ButtonFX.init('.triviaButton');
        UI.ButtonFX.oneClick('.triviaButton');

        $questionAnswers = $('[data-answer]');

        $questionAnswers.click(function () {
            var $this = $(this);
            $this.unbind('click');
            var correct = $this.attr('data-correct');

            $this.removeClass('default');

            if (correct === '1') {
                STARZ.EventDispatcher.fire('achievementEvent', STARZ.Achievement.RightAnswer);
                $this.addClass('correct');
                // keep track of the user's progress
                completedAnswers++;
                // prompt for more answers if there are multiple correct ones
                if ((totalAnswers > 1) && (totalAnswers > completedAnswers))$questionFeedback.text('Keep going, there are more correct answers.');
                STARZ.SoundManager.playFX(4);
            } else {
                STARZ.EventDispatcher.fire('achievementEvent', STARZ.Achievement.WrongAnswer);
                $this.addClass('incorrect');
                // no second chances if you get one wrong
                complete(q.incorrect, 'incorrect');
                STARZ.SoundManager.playFX(5);
            }

            // all correct answers selected
            if (completedAnswers === totalAnswers) {
                complete(q.correct, 'correct');
            }
        });

        currentQuestion++;

        // prevent index error
        if (currentQuestion === quizData.questions.length)currentQuestion = 0;
    }

    function animateButtons(b) {
        var count = 1,
            delay = .400;

        $(b).each(function () {
            var $this = $(this);
            TweenLite.from($this, .25, {'y': 30, 'opacity': 0, delay: count * delay});
            count++;
            UI.ButtonFX.setState($this, count * delay * 1000);
        });
    }

    // remove listeners, reset values, empty content
    function cleanup() {
        totalAnswers = 0;
        completedAnswers = 0;

        // remove styling
        $('[data-answer]').removeClass('correct incorrect');

        // remove old content
        if ($questionText) {
            $questionText.empty();
            $questionAnswers.remove();
            $questionFeedback.empty();
        }
    }

    // question is done
    function complete(t, c) {
        // remove listeners
        if ($questionAnswers != undefined) $questionAnswers.unbind('click');

        $questionFeedback.text(t);

        STARZ.EventDispatcher.fire('quizEvent', c);

        // cleanup bindings
        UI.ButtonFX.cleanup('.triviaButton');

        // add button FX to next button
        UI.ButtonFX.init('.buttonOptions');

        // this must happen after the event is fired
        // this button will change, so we'll always look for a new instance
        $nextButton = $parentContainer.find('.next');

        // animate it in
        $nextButton.fadeTo('slow', 1);
        TweenLite.from($nextButton, .25, {'x': 100})
    }

    return {
        data: storeData,
        build: createQuestion,
        questions: function () {
            // stores how many questions each round has
            return quizData.sets;
        }
    }

})(); STARZ.ScreenManager = (function() {

    var TRANSITION_SPEED = 500;
    var currentScreen,
        screenMethods = {
            'methods': []
        };

    // handle nav events
    document.addEventListener('navEvent', handleNavEvents);

    function handleNavEvents(e) {
        var s = e.detail;
        showScreen(s);
    }

    function showScreen(s) {
        if(!currentScreen) {
            show(s);
        } else {
            currentScreen.stop().fadeTo(TRANSITION_SPEED, 0, function() {
                currentScreen.hide();
                show(s);
            })
        }
    }

    function show(s) {
        currentScreen = $(s);
        checkForScreenMethod(s);
        currentScreen.stop().fadeTo(TRANSITION_SPEED, 1);
    }

    // store methods that you'd like to run when a screen shows
    // for example, call the quiz manager when the quiz screen shows
    function bindMethod(k, m, a) {
        var o = {
            'screen': k,
            'method': m,
            'argument': a
        };

        screenMethods.methods.push(o);
    }

    // look for a method for a particular screen
    function checkForScreenMethod(s) {
        for(var i = 0; i < screenMethods.methods.length; i++) {
            if(screenMethods.methods[i].screen === s) {
                screenMethods.methods[i].method(screenMethods.methods[i].argument);
                break;
            }
        }
    }

    return {
        showScreen: showScreen,
        bindMethod: bindMethod
    }

})(); STARZ.SoundManager = (function () {

    var mute = false,
        audio,
        fx = [],
        music = [],
        currentMusic,
        filesLoaded = 0,
        totalFiles = 0,
        $loadText = $('#loading').find('.loadStatus');

    function init(a) {
        audio = document.getElementById(a);
        audio.style.display = "none";
    }

    function addFX(f) {
        storeAudio(f, fx);
    }

    function addMusic(m) {
        // storeAudio(m, music);
    }

    function storeAudio(file, array) {
        totalFiles++;
        var instance = document.getElementById(file);
        instance.preload = "auto";
        array.push(instance);
        // instance.addEventListener('canplaythrough', audioLoaded);
    }

    function audioLoaded() {
        filesLoaded++;
        $loadText.text('Loading ' + filesLoaded + ' of ' + totalFiles + ' audio files.');
        if (filesLoaded === totalFiles) {
            STARZ.EventDispatcher.fire('audioloaded');
        }
    }

    function playFX(s) {
        if (!mute) {
            fx[s].load();
            fx[s].play();
        }
    }

    function playMusic(s) {
        /*
        if (currentMusic)currentMusic.pause();
        currentMusic = music[s];

        if (!mute) {
            music[s].load();
            music[s].play();
        }
        */
    }

    function stop() {
        // if (currentMusic)currentMusic.pause();
    }

    function toggle(m) {
        mute = m || !mute;

        if (mute) {
            stop();
        } else {
            // if (currentMusic)currentMusic.play();
        }
    }

    function pause() {
        mute = true;
        stop();
    }

    function resume() {
        mute = false;
        // if (currentMusic)currentMusic.play();
    }

    return {
        init: init,
        addFX: addFX,
        addMusic: addMusic,
        playFX: playFX,
        playMusic: playMusic,
        stop: stop,
        toggle: toggle,
        pause: pause,
        resume: resume
    }

})(); STARZ.TVManager = (function () {

    var BONUS_FREQUENCY = 1;

    var imageData,
        tvSets = [],
        brokenCount,
        completeCount;

    function storeData(d) {
        imageData = d;
    }

    function createTVs(el) {
        if (tvSets.length < 1) {
            $(el).each(function () {
                // build the object
                var data = {
                    'el': $(this),
                    'starzImage': pickImage(imageData.starz),
                    'images': createImagesArray(imageData.generic),
                    'brokenImage': pickImage(imageData.broken),
                    'bonusImage': pickBonusImage(imageData.bonus),
                    'finalImage': imageData.finalImage
                };

                var tv = STARZ.TV.create(data);
                document.addEventListener('tvEvent', handleTVEvent);
                tvSets.push(tv);
            });
        }

        tvReady();
    }

    // set the initial image, reset the timer, prep for gameplay
    function tvReady() {
        // reset level counters
        brokenCount = 0;
        completeCount = 0;

        for (var i = 0; i < tvSets.length; i++) {
            tvSets[i].init();
        }
    }

    function startTVs() {
        for (var i = 0; i < tvSets.length; i++) {
            tvSets[i].start();
        }
    }

    function pauseTVs() {
        for (var i = 0; i < tvSets.length; i++) {
            tvSets[i].pause();
        }
    }

    function pickImage(imgArray) {
        // randomly select which original will appear on the tv
        var n = Math.floor(Math.random() * imgArray.length);

        // prevent exceeding the array index
        if (n === imgArray.length) n--;

        return imgArray[n].image;
    }

    function pickBonusImage(imgArray) {
        // random chance for a bonus image is determined
        if (Math.ceil(Math.random() * BONUS_FREQUENCY) === BONUS_FREQUENCY) {
            // randomly select which original will appear on the tv
            var n = Math.floor(Math.random() * imgArray.length);

            // prevent exceeding the array index
            if (n === imgArray.length) n--;

            // return the bonus image and it's value
            return {
                'image': imgArray[n].image,
                'value': imgArray[n].value
            };

        } else {
            // no soup for you
            return null;
        }
    }

    function createImagesArray(imgCollection) {
        var keys = Object.keys(imgCollection);
        var imgArray = [];

        for (var i = 0; i < keys.length; i++) {
            imgArray.push(imgCollection[keys[i]].image);
        }

        return imgArray;
    }

    // tracks the status of all the tvs, fires event to end the level
    function handleTVEvent(e) {
        switch (e.detail) {
            case 'broken':
                brokenCount++;
                break;
            case 'complete':
                completeCount++;
                break;
        }

        if ((brokenCount + completeCount) === tvSets.length) {
            STARZ.EventDispatcher.fire('gameEvent', 'roundComplete');
        }

    }

    return {
        data: storeData,
        build: createTVs,
        pause: pauseTVs,
        start: startTVs
    }

})();  STARZ.Scores = {};

STARZ.Scores.CompletedTV = 1000,
    STARZ.Scores.BrokenTV = -500,
    STARZ.Scores.Correct = 500,
    STARZ.Scores.Channel = 10,
    STARZ.Scores.Incorrect = -250;
 STARZ.TV = (function () {

    // tv set class object
    var TVSet = function (data) {
        var TWEEN_SPEED = .5,
            CHANNEL_INTERVAL,
            CHANNEL_SPEED = Math.round(Math.random()*4000)+2000;

        var el = data.el,
            images = data.images,
            starzImage = data.starzImage,
            finalImage = data.finalImage,
            brokenImage = data.brokenImage,
            bonusImageObject = data.bonusImage,
            bonusValue = 0,
            paused = false,
            currentImage = '',
            timer = STARZ.Timer.create(el.children('.timer:eq(0)')),
            alert = el.children('.alert:eq(0)'),
            alertIcon = alert.children('.animate:eq(0)'),
            bonus = el.children('.bonus:eq(0)'),
            bonusIcon = bonus.children('.animate:eq(0)');

        function tvReady() {
            // get everything ready, but don't add click events or start the timer
            resetTimer();

            // store the final image
            images.push(starzImage);

            // set the initial image
            changeScreenImage();

            // reset any css transformations
            el.removeClass('broken1');
            el.removeClass('broken2');
            el.removeClass('broken3');
            el.removeClass('broken4');

            finalClick = false;
            paused = false;
            alert.hide();
            bonus.hide();
        }

        function start() {
            // when time runs out, break the tv set
            timer.complete(smash);

            // set a warning when the timer is close to done
            timer.alert('0.7', showAlert);

            // add the bonus image if it exists, and setup an event for when it's clicked
            if (bonusImageObject != null) {
                // determine where it will be placed in the image array
                var index = Math.floor(Math.random() * (images.length - 1));
                images.splice(index, 0, bonusImageObject.image);

                // store the bonusValue value
                bonusValue = bonusImageObject.value;
            }

            startTimer();

            el.click(function () {
                handleClick();
            })
        }

        function changeScreenImage() {
            // screen image is random.
            var imgIndex = Math.floor(Math.random() * images.length);

            if (imgIndex === images.length) imgIndex--;

            if (images[imgIndex] === currentImage) {
                // prevents showing the same image twice
                changeScreenImage();
            } else {
                currentImage = images[imgIndex];
                el.css({'background-image': 'url(img/tv/' + currentImage + ')'});
            }

        }

        function showAlert() {
            alert.fadeTo('fast', 1);
            new TweenLite(alertIcon, TWEEN_SPEED, {width: '70%', rotation: '360', ease: Quad.easeOut});
            STARZ.SoundManager.playFX(1);
        }

        function hideAlert() {
            alert.fadeTo('slow', 0, function () {
                $(this).hide();
            });
            new TweenLite(alertIcon, TWEEN_SPEED, {width: '20%', rotation: '0', ease: Quad.easeOut});
        }

        function showBonus() {
            bonus.fadeTo('fast', 1);
            new TweenLite(bonusIcon, TWEEN_SPEED, {width: '70%', ease: Quad.easeOut, onComplete: hideBonus});
            STARZ.SoundManager.playFX(0);
        }

        function hideBonus() {
            bonus.fadeTo('slow', 0, function () {
                $(this).hide();
            });
            new TweenLite(bonusIcon, TWEEN_SPEED, {width: '20%', ease: Quad.easeOut});
        }

        function handleClick() {
            if (!paused) {
                // check to see if it's a starz original, otherwise keep cycling through images
                if (currentImage === starzImage) {
                    complete();
                } else {
                    if (bonusImageObject) {
                        // check to see if it's a bonus
                        if (currentImage === bonusImageObject.image) {
                            STARZ.EventDispatcher.fire('tvEvent', {'type': 'bonus', 'value': bonusValue});
                            showBonus();
                            changeScreenImage();
                        }
                    }
                }
            }
        }

        function resetTimer() {
            timer.reset();
        }

        function startTimer() {
            paused = false;
            timer.start();

            startChangingChannels();
        }

        function pauseTimer() {
            paused = true;
            timer.stop();

            stopChangingChannels();
        }

        function startChangingChannels() {
            // start cycling through images
            CHANNEL_INTERVAL = setInterval(changeScreenImage, CHANNEL_SPEED);
        }

        function stopChangingChannels() {
            // stop cycling through images
            clearInterval(CHANNEL_INTERVAL);
        }

        function smash() {
            cleanupTV();

            // css transform
            var broken = Math.floor(Math.random() * 4);

            switch (broken) {
                case 0:
                    el.addClass('broken1');
                    break;
                case 1:
                    el.addClass('broken2');
                    break;
                case 2:
                    el.addClass('broken3');
                    break;
                case 3:
                    el.addClass('broken4');
                    break;
                default:
                    el.addClass('broken1');
                    break;
            }

            el.css({'background-image': 'url(img/tv/' + brokenImage + ')'});
            STARZ.EventDispatcher.fire('tvEvent', 'broken');
            STARZ.SoundManager.playFX(3);
        }

        function complete() {
            timer.stop();
            stopChangingChannels();
            cleanupTV();
            el.css({'background-image': 'url(img/tv/' + finalImage + ')'});
            STARZ.EventDispatcher.fire('tvEvent', 'complete');
            STARZ.SoundManager.playFX(2);
        }

        function cleanupTV() {
            timer.reset();
            stopChangingChannels();
            hideAlert();
            removeClick();
        }

        function removeClick() {
            el.unbind('click');
        }

        return {
            init: tvReady,
            start: start,
            pause: pauseTimer
        }

    };

    // create tv method
    function createTV(data) {
        return TVSet(data);
    }

    return {
        create: createTV
    }

})(); STARZ.Timer = (function () {

    var TIMER_RANGE = 15;

    var TVTimer = function (el) {
        var TIMER_SPEED = Math.round(Math.random() * TIMER_RANGE) + TIMER_RANGE;

        var $el = el,
            timerTween,
            timerCompleteMethod,
            alertInterval;

        function start() {
            if (timerTween) {
                // if we paused an existing tween
                timerTween.play();
            } else {
                // if we're starting a new tween
                timerTween = new TweenLite($el, TIMER_SPEED, {width: '80%', ease: Linear.easeNone, onComplete: timerComplete});
                //timerTween.progress() = 0.8;
            }
        }

        function stop() {
            if (timerTween)timerTween.pause();
        }

        function restart() {
            if (timerTween)timerTween.restart();
        }

        function reset() {
            // reset the tween var so we know to start from scratch
            timerTween = null;
            $el.css('width', '0');
            if (alertInterval)clearInterval(alertInterval);
        }

        // call a method when the timer reaches a certain point
        function setAlert(t, m) {
            alertInterval = setInterval(function () {
                if (timerTween) {
                    if (timerTween.progress() >= t) {
                        m();
                        clearInterval(alertInterval);
                    }
                }
            }, 1000);
        }

        function timerComplete() {
            timerCompleteMethod();
        }

        function setCompleteCallback(m) {
            timerCompleteMethod = m;
        }

        return {
            start: start,
            stop: stop,
            reset: reset,
            restart: restart,
            complete: setCompleteCallback,
            alert: setAlert
        }
    };

    function createTimer(el) {
        return TVTimer(el);
    }

    return {
        create: createTimer
    }

})(); STARZ.Game = (function () {
    var START_DELAY = 2000;

    var $readyPrompt = $('#ready'),
        $completePrompt = $('#complete');

    document.addEventListener('gameEvent', handleGameEvent);

    function init() {
        $readyPrompt.fadeTo('fast', 1);
        $completePrompt.hide();

        // overlay to dim the background
        UI.Dimmer.reset();
        UI.Dimmer.show(0.4);

        setTimeout(startLevel, START_DELAY);

        STARZ.TVManager.build('.tvScreen');
        STARZ.SoundManager.stop();
    }

    function startLevel() {
        $readyPrompt.fadeTo('fast', 0, function () {
            $(this).hide();
        });

        STARZ.SoundManager.playMusic(1);
        STARZ.TVManager.start();
    }

    function endLevel() {
        $completePrompt.delay(2000).fadeTo('fast', 1);

        // hide bg overlay
        UI.Dimmer.hide(1000);
        STARZ.SoundManager.stop();
    }

    function handleGameEvent(e) {
        switch (e.detail) {
            case 'roundComplete':
                endLevel();
                break;
        }
    }

    return {
        init: init
    }

})(); STARZ.Instructions = (function() {

    var instructions;

    function init() {


        if(!instructions) {
            setupUI();
        } else {
            instructions.reset();
        }
    }

    function setupUI() {
        instructions = UI.Slideshow.build('#instructions', '.wrapper', '.item', '.prev', '.next');
    }

    return {
        init: init
    }

})(); STARZ.Quiz = (function () {

    var data,
        quizRoundData,
        questionsComplete,
        questionsTotal,
        $play = $('[data-screen="#gameplayScreen"]'),
        $summary = $('[data-screen="#summaryScreen"]'),
        $nextQuestion = $('[data-method="nextQuestion"]');

    // track every time a question is answered
    document.addEventListener('quizEvent', handleEvent);

    // bind method to this button
    $nextQuestion.click(function () {
        buildQuiz();
    });

    function init() {
        // setup buttons
        $nextQuestion.addClass('next');
        $play.removeClass('next');
        $summary.removeClass('next');

        STARZ.SoundManager.playMusic(0);

        // if they've reached level three, change which button shows by assigning the 'next' class to it
        data = data || STARZ.GameStatusManager.data();

        // get data specific to this round
        quizRoundData = STARZ.QuizManager.questions();

        switch (data.currentRound) {
            case 1:
                questionsTotal = quizRoundData[0].round1;
                break;
            case 2:
                questionsTotal = quizRoundData[0].round2;
                break;
            case 3:
                questionsTotal = quizRoundData[0].round3;
                break;
            default:
                questionsTotal = quizRoundData[0].round1;
                break;
        }

        questionsComplete = 0;

        UI.Dimmer.contract(80);
        UI.Dimmer.show(0.4);

        buildQuiz();
    }

    // every time a question is answered, check the total and show the appropriate button
    function handleEvent() {
        questionsComplete++;

        // we're done with this quiz
        if (questionsComplete === questionsTotal) {
            // all questions answered, and it's the final round
            if (data.currentRound === data.totalRounds) {
                // this determines which button will show when the user finishes the quiz question
                $nextQuestion.removeClass('next');
                $summary.addClass('next');
            } else {
                // all questions answered, but there's another round of gameplay
                $nextQuestion.removeClass('next');
                $play.addClass('next');
            }
        }
    }

    function buildQuiz() {
        // specify the element that will hold quiz questions (div, span, p, etc);
        STARZ.QuizManager.build('span');
    }

    return {
        init: init
    }

})(); STARZ.Summary = (function() {

    var $broken,
        $completed,
        $score,
        $correct,
        $bonusCount,
        $incorrect,
        $achievements;

    var data;

    function init() {
        // if they got this far, the game is over
        STARZ.EventDispatcher.fire('achievementEvent', STARZ.Achievement.GameComplete);

        $broken = $broken || $('[data-stat-broken]');
        $completed = $completed || $('[data-stat-completed]');
        $score = $score || $('[data-stat-score]');
        $bonusCount = $bonusCount || $('[data-stat-bonuscount]');
        $correct = $correct || $('[data-stat-correct]');
        $incorrect = $incorrect || $('[data-stat-incorrect]');
        $achievements = $achievements || $('#achievements');

        STARZ.SoundManager.playMusic(0);

        data = STARZ.GameStatusManager.data();

        setText();

        UI.Dimmer.contract(80);
        UI.Dimmer.show(0.4);
    }

    function setText() {
        $broken.text(data.brokenTV);
        $completed.text(data.completedTV);
        $score.text(data.score);
        $bonusCount.text(data.bonusCount);
        $correct.text(data.correct);
        $incorrect.text(data.incorrect);

        // populate achievements list
        var html = '';
        $achievements.empty();

        for(var i = 0; i < data.achievements.length; i++) {
            html += '<span class="achievement"><strong class="ltBlue">'+ data.achievements[i].name + '</strong><br><em>' + data.achievements[i].detail + '</em></span><br>';
        }

        $(html).appendTo($achievements);
    }

    return {
        init: init
    }

})(); STARZ.Title = (function() {

    var $titleImage,
        $buttonPlay,
        $buttonInstructions,
        toggleButton;

    function init() {
        // reset all scores, values, etc
        STARZ.GameStatusManager.reset();
        STARZ.SoundManager.playMusic(0);
        UI.Dimmer.hide();

        // only do this once
        if(!toggleButton) {
            toggleButton = '#volumeToggle';
            UI.ToggleButton.init(toggleButton, '[data-toggle-on]', '[data-toggle-off]', STARZ.SoundManager.toggle, true);
        }

        // get stuff, store stuff, animate stuff
        $titleImage = $titleImage || $('#titleImage');
        $buttonPlay = $buttonPlay || $('#titlePlay');
        $buttonInstructions = $buttonInstructions || $('#titleInstructions');

        TweenLite.from($titleImage,3, {'opacity': 0});
        TweenLite.from($buttonPlay, 0.5, {'opacity': 0, x: '-100px', delay: 2.5});
        TweenLite.from($buttonInstructions, 0.5, {'opacity': 0, x: '100px', delay: 2.5});

        $('.toggleButton').fadeTo('fast', 1);

        //UI.VideoPlayer.playVideo("http://www.starz.com/videos/html5/the_white_queen_27014.mp4");
    }

    return {
        init: init
    }

})(); UI.ButtonFX = (function () {

    var OPACITY_OFF = 0.6;

    function init(c) {
        var $element = $(c);
        $element.stop().css('opacity', OPACITY_OFF);

        $element.hover(
            function () {
                if ($(this).css('opacity') >= OPACITY_OFF)$(this).stop().fadeTo('fast', 1);
            }, function () {
                if ($(this).css('opacity') >= OPACITY_OFF)$(this).stop().fadeTo('fast', OPACITY_OFF);
            });
    }

    // button stays highlighted after one click
    function oneClick(c) {
        var $element = $(c);

        $element.click(function () {
            cleanup($(this));
        })
    }

    function cleanup(c) {
        var $element = $(c);

        // prevent memory leaks, etc
        $element.stop().unbind('mouseenter mouseleave');
    }

    function setState(e, d) {
        // allows you to set the state of the button after it fades in
        if (d) {
            setTimeout(function () {
                setInitialState(e);
            }, d)
        } else {
            setInitialState(e);
        }
    }

    function setInitialState(e) {
        e.stop().fadeTo('fast', OPACITY_OFF);
    }

    return {
        init: init,
        oneClick: oneClick,
        cleanup: cleanup,
        setState: setState
    }

})(); UI.Dimmer = (function() {

    // set 'er up
    var $dimmer = $('#dimmer');

    $dimmer.css({
        position: 'fixed',
        'z-index': 1,
        width: '100%',
        'background-color': '#000',
        top: 0,
        left: 0,
        display: 'none'
    });

    // keep it fullscreen
    window.onresize = function() {
        resizeDimmer();
    };

    // set initial size to full screen
    resizeDimmer();

    function resizeDimmer() {
        $dimmer.css({'height': window.innerHeight + 'px'});
    }

    function show(o) {
        var opacity = o || 1;
        $dimmer.fadeTo(500, opacity);
    }

    function hide(delay) {
        var d = delay || 0;

        $dimmer.delay(d).fadeTo(500, 0, function () {
            $(this).hide();
        });
    }

    function contract(p) {
        var centerAdjust = (100 - p)/2;
        $dimmer.css({'left': centerAdjust + '%', 'width': p + '%'});
    }

    function reset() {
        $dimmer.css({'left': '0', 'width': '100%'});
    }

    function destroy() {
        $dimmer.hide();
    }

    return {
        show: show,
        hide: hide,
        contract: contract,
        reset: reset,
        destroy: destroy
    }

})(); UI.Navigation = (function () {

    // handle all screen-to-screen nav with the data-screen attribute
    $('[data-screen]').click(function () {
        var s = $(this).attr('data-screen');

        // IE Workaround
        var e = document.createEvent("CustomEvent");
        e.initCustomEvent('navEvent', false, false, s);

        document.dispatchEvent(e);

        /*
         var e = new CustomEvent('navEvent', {'detail': s});
         document.dispatchEvent(e);
         */
    });

})(); UI.Slideshow = (function () {

    function init(p, w, c, prev, next) {
        return new Instance(p, w, c, prev, next);
    }

    // slideshow instance
    var Instance = function (p, w, c, prev, next) {
        var $parent, $wrapper, $containers, $prev, $next, count, animating;

        $parent = $(p);
        $wrapper = $parent.find(w + ':eq(0)');
        $containers = $wrapper.children(c);
        $prev = $parent.find(prev + ':eq(0)');
        $next = $parent.find(next + ':eq(0)');

        setupCSS();
        setupButtons();
        reset();

        function setupCSS() {
            var maxHeight = 0;

            $containers.each(function () {
                var $this = $(this);
                $this.css({'width': $parent.width() + 'px', 'display': 'block', 'float': 'left', 'height': $this.height() + 'px'});

                if ($this.height() > maxHeight)maxHeight = $this.height();
            });

            $wrapper.css({'width': ($containers.length * $parent.width) + 'px', 'height': maxHeight + 'px', 'position': 'absolute', 'overflow': 'hidden', 'top': 0, 'left': 0});

            $next.css({'position': 'absolute', 'z-index': '1000', 'right': '5%', 'top': '50%', 'margin-top': '-' + $next.height() / 2 + 'px'});
            $prev.css({'position': 'absolute', 'z-index': '1000', 'left': '5%', 'top': '50%', 'margin-top': '-' + $next.height() / 2 + 'px'});
        }

        function setupButtons() {
            $prev.click(function () {
                animate(-1);
            });

            $next.click(function () {
                animate(1);
            })
        }

        function animate(v) {
            if (!animating) {
                animating = true;
                var $i = $($containers[count]);

                $i.fadeTo('fast', 0, function () {
                    count += v;

                    if (count < 0) count = $containers.length - 1;
                    if (count === $containers.length) count = 0;

                    $i.hide();

                    var $j = $($containers[count]);

                    $j.fadeTo('fast', 1, function () {
                        if (count === 0)$prev.fadeTo('fast', 0, function () {
                            $prev.hide();
                        });
                        if (count === $containers.length - 1)$next.fadeTo('fast', 0, function () {
                            $next.hide();
                        });
                        if (count > 0)$prev.fadeTo('fast', 0.8);
                        if (count < $containers.length - 1)$next.fadeTo('fast', 0.8);

                        animating = false;
                    })
                });
            }
        }

        function reset() {
            $prev.hide();
            $next.hide();
            $containers.hide();

            animating = true;
            count = 0;

            var $j = $($containers[count]);

            $j.fadeTo('fast', 1, function() {
                animating = false;
                $next.fadeTo('fast', 1);
            });
        }

        return {
            reset: reset
        }
    };

    return {
        build: init
    }

})(); UI.ToggleButton = (function () {

    function init(e, a, b, fa, fb, initialState) {
        // accepts a parent element, an 'on' element, an 'off' element, and a separate or single method for the on and off elements.
        var $element = $(e),
            $toggleOn = $element.find($(a)),
            $toggleOff = $element.find($(b)),
            toggleOnMethod = fa,
            toggleOffMethod;

        toggleOffMethod = ((initialState = undefined) ? toggleOffMethod = fb : (initialState = fb)&&(toggleOffMethod = toggleOnMethod));

        $element.data('toggle', initialState);
        $toggleOff.hide();
        $element.fadeTo('fast', 1);

        $element.click(function () {
            var $this = $(this);

            if ($this.data('toggle')) {
                toggleOnMethod();
                $toggleOn.hide();
                $toggleOff.show();
                $this.data('toggle', false);
            } else {
                toggleOffMethod();
                $toggleOn.show();
                $toggleOff.hide();
                $this.data('toggle', true);
            }
        })
    }

    return {
        init: init
    }

})(); UI.VideoPlayer = (function () {
    // adds the STARZ video player and libraries to a document
    var $video,
        $close,
        trys = 0,
        initialized = false;

    var libSrc = 'http://assets.starz.com/starzvideoplayer/v1-patch30/JsLib/starzVideoPlayer2.js';

    function init(e, c) {
        if (!initialized) {
            initialized = true;

            $video = $(e);
            $close = $(c);

            // create the library script tag
            var vLib = document.createElement('script');
            vLib.type = 'text/javascript';
            vLib.async = true;
            vLib.src = libSrc;

            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(vLib, s);

            // close button
            $close.click(function () {
                close();
            });

            $video.hide();
        }
    }

    function playVideo(v) {
        if (typeof starzVideoPlayer2 === 'undefined') {
            setTimeout(function () {
                trys++;

                if (trys === 3) {
                    error();
                } else {
                    playVideo(v);
                }
            }, 500);
        } else {
            _options = {
                src: v,
                ccUri: "",
                poster: "img/poster.jpg",
                width: 533,
                height: 300,
                autoPlay: true
            };

            starzVideoPlayer2.init(_options, false);
            $video.show();
            STARZ.SoundManager.pause();
        }
    }

    function close() {
        starzVideoPlayer2.stop();
        $video.hide();
        STARZ.SoundManager.resume();
    }

    function error() {
        // handle video error
        console.log('error');
    }

    return {
        init: init,
        playVideo: playVideo,
        close: close
    }

})(); 
STARZ.EventDispatcher = (function() {

    // accepts event type and details object
    // use this for app-wide events you'd like to capture on the document level
    function fireEvent(e, o) {
        // IE Workaround
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent(e, true, false, o);

        document.dispatchEvent(event);
        //document.dispatchEvent(new CustomEvent(e, {'detail': o}));
    }

    return {
        fire: fireEvent
    }

})(); STARZ.JSONLoader = (function() {

    // accepts a file path, success callback, and error callback
    function loadJSON(u, s, e) {
        $.ajax({
            url: u,
            data: "json",
            success: dataLoaded,
            error: dataError
        });

        // send the data back to the caller
        function dataLoaded(d) {
            s(d);
        }

        // send the error message back to the caller
        function dataError(error) {
            e(error.status + ', ' + u + ' ' + error.statusText);
        }
    }

    return {
        load: loadJSON
    }

})(); STARZ.InControl = (function() {

    var dataTotal = 0,
        dataMax = 2;

    function init() {
        // reset all user stats;
        STARZ.GameStatusManager.reset();

        // setup data and listeners
        setupGameData();
    }

    // load game data, startup
    function setupGameData() {
        // only run it the first time we play
        if(dataTotal === 0) {
            //document.addEventListener('audioloaded', dataItemLoaded);

            // video setup
            UI.VideoPlayer.init('[data-video]', '#closeVideo');

            // music setup
            STARZ.SoundManager.init('audio');
            STARZ.SoundManager.addMusic('title');
            STARZ.SoundManager.addMusic('gameplay');
            STARZ.SoundManager.addFX('bonus');
            STARZ.SoundManager.addFX('hurry');
            STARZ.SoundManager.addFX('locked');
            STARZ.SoundManager.addFX('broken');
            STARZ.SoundManager.addFX('correct');
            STARZ.SoundManager.addFX('incorrect');

            // button setup
            UI.ButtonFX.init('.button1');

            STARZ.ScreenManager.showScreen('#loading');
            STARZ.JSONLoader.load('data/images.json', tvDataLoaded, gameError);
            STARZ.JSONLoader.load('data/quiz.json', quizDataLoaded, gameError);
        } else {
            STARZ.ScreenManager.showScreen('#titleScreen');
        }
    }

    function tvDataLoaded(d) {
        STARZ.TVManager.data(d);
        dataItemLoaded();
    }

    function quizDataLoaded(d) {
        STARZ.QuizManager.data(d);
        dataItemLoaded();
    }

    function dataItemLoaded() {
        dataTotal++;
        checkStatus();
    }

    function checkStatus() {
        if(dataTotal === dataMax) {
            bindMethods();
            STARZ.ScreenManager.showScreen('#titleScreen');
            //UI.VideoPlayer.playVideo("http://www.starz.com/videos/html5/the_white_queen_27014.mp4");
        }
    }

    // store methods you'd like to call when specific screens load
    function bindMethods() {
        // reset game
        STARZ.ScreenManager.bindMethod('#titleScreen', STARZ.Title.init);

        // instructions
        STARZ.ScreenManager.bindMethod('#instructionsScreen', STARZ.Instructions.init);

        // setup quiz questions
        STARZ.ScreenManager.bindMethod('#triviaScreen', STARZ.Quiz.init);

        // setup game screen
        STARZ.ScreenManager.bindMethod('#gameplayScreen', STARZ.Game.init);

        // setup summary screen
        STARZ.ScreenManager.bindMethod('#summaryScreen', STARZ.Summary.init);
    }

    // universal error handler. call this from anywhere in the app if a crash occurs
    function gameError(e) {
        // handle fatal error
        if(e) {
            console.log('Error: ' + e);
        }
        console.log('Game crashed.')
    }

    return {
        init: init,
        error: gameError
    }

})();

STARZ.InControl.init();